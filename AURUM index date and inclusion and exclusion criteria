/************************************************************************************
FINAL COMPLETE SAS CODE FOR CPRD TTE STUDY (ESTIMAND 1, ITT)
************************************************************************************/

/************************************************************************************
STEP 0: SET LIBRARIES
************************************************************************************/

libname raw "F:\Projects\Student\Gabriela Ochoa Gracia\CPRD_Aurum_Simulated_data";
libname diag "F:\Projects\Student\Gabriela Ochoa Gracia\Final codelist txt";
libname drug "F:\Projects\Student\Gabriela Ochoa Gracia\Subset_Product";
libname subset_diag "F:\Projects\Student\Gabriela Ochoa Gracia\Subsets_Diagnosis";
libname prod_code "F:\Projects\Student\Gabriela Ochoa Gracia\Final codelist txt\product codelist";
libname export "F:\Projects\Student\Gabriela Ochoa Gracia\Final_Data"; 

/************************************************************************************
STEP 1: BUILD VALID STUDY ENTRY & EXIT WINDOW
************************************************************************************/

proc sort data=raw.patient; by pracid; run;
proc sort data=raw.practice; by pracid; run;

data raw.patient_working;
  merge raw.patient (in=ina)
        raw.practice (in=inb keep=pracid lcd);
  by pracid;
  if ina;
run;

data raw.patient_entry_exit;
  set raw.patient_working;
  entry = max(regstartdate, '01JAN2012'd);
  exit = min(regenddate, lcd, '31DEC2024'd);
  if cprd_ddate ne . and cprd_ddate < exit then exit = cprd_ddate;
  if entry < exit then include=1; else include=0;
run;

data work.valid_population;
  set raw.patient_entry_exit;
  if include=1;
run;

/************************************************************************************
STEP 2: APPLY T2DM DIAGNOSIS AND AGE >= 40 FILTER
************************************************************************************/

proc sort data=diag.diagnosis_diabetestype2_subset; by patid; run;
proc sort data=work.valid_population; by patid; run;

data work.t2dm;
  merge work.valid_population (in=a)
        diag.diagnosis_diabetestype2_subset (in=b);
  by patid;
  if a and b; 
run;

data work.t2dm;
  set work.t2dm;
  birthdate = mdy(6, 30, yob);
  age_entry = intck('year', birthdate, entry);
run;

data work.t2dm_age;
  set work.t2dm;
  if age_entry >= 40;
run;

/************************************************************************************
STEP 3: CREATE CVD RISK GROUP FLAG
************************************************************************************/

proc sort data=diag.diagnosis_ihd; by patid; run;
proc sort data=diag.diagnosis_strokepartofmaceandcer; by patid; run;
proc sort data=diag.diagnosis_pad; by patid; run;
proc sort data=diag.diagnosis_dyslipidaemia; by patid; run;
proc sort data=diag.diagnosis_hypertension; by patid; run;
proc sort data=diag.diagnosis_smoker; by patid; run;

data work.cv_risk;
  merge work.t2dm_age (in=a)
        diag.diagnosis_ihd (in=ihd)
        diag.diagnosis_strokepartofmaceandcer (in=stroke)
        diag.diagnosis_pad (in=pad)
        diag.diagnosis_dyslipidaemia (in=dyslip)
        diag.diagnosis_hypertension (in=htn)
        diag.diagnosis_smoker (in=smoke);
  by patid;

  cvd_flag = (ihd or stroke or pad);
  dyslip_flag = (dyslip ne .);
  htn_flag = (htn ne .);
  smoke_flag = (smoke ne .);
run;

data work.cv_included;
  set work.cv_risk;

  if cvd_flag=1 then high_risk=1;
  else if cvd_flag=0 then do;
     if (gender=1 and age_entry>=55) or (gender=2 and age_entry>=60) then do;
       risk_sum = sum(dyslip_flag, htn_flag, smoke_flag);
       if risk_sum >= 1 then high_risk=1;
       else high_risk=0;
     end;
     else high_risk=0;
  end;
run;

data work.study_population;
  set work.cv_included;
  if high_risk=1;
run;

/************************************************************************************
STEP 4: ASSIGN EXPOSURES (SGLT2i vs DPP4i)
************************************************************************************/

proc sort data=drug.sglt2_p_subset; by patid; run;
proc sort data=drug.dpp4_p_subset; by patid; run;

data work.sglt2_users;
  merge work.study_population (in=a)
        drug.sglt2_p_subset (in=b);
  by patid;
  if b;
run;

data work.dpp4_users;
  merge work.study_population (in=a)
        drug.dpp4_p_subset (in=b);
  by patid;
  if b;
run;

proc sql;
create table work.sglt2_first as
select patid, min(issuedate) as sglt2_index format=date9.
from work.sglt2_users group by patid;
quit;

proc sql;
create table work.dpp4_first as
select patid, min(issuedate) as dpp4_index format=date9.
from work.dpp4_users group by patid;
quit;

data work.index_assign;
  merge work.sglt2_first (in=a) work.dpp4_first (in=b);
  by patid;
run;

data work.index_clean;
  set work.index_assign;
  if a and not b then do; treatment="SGLT2i"; index_date=sglt2_index; end;
  else if b and not a then do; treatment="DPP4i"; index_date=dpp4_index; end;
  else delete;
run;

/************************************************************************************
STEP 5: APPLY WASHOUT EXCLUSIONS
************************************************************************************/

data work.sglt2_history;
  set drug.sglt2_p_subset
      drug.sglt2_comb_met_subset
      drug.sglt2_comb_dpp4_subset
      drug.sglt2_comb_dpp4_met_subset;
run;

data work.dpp4_history;
  set drug.dpp4_p_subset
      drug.dpp4_comb_met_subset
      drug.dpp4_comb_statin_subset
      drug.dpp4_comb_thiazolidione_subset;
run;

data work.tzd_history;
  set drug.thiazolidinediones;
run;

proc sort data=work.index_clean; by patid; run;
proc sort data=sglt2_history; by patid; run;
proc sort data=dpp4_history; by patid; run;
proc sort data=tzd_history; by patid; run;

data work.sglt2_prior;
  merge work.index_clean (in=a) sglt2_history (in=b);
  by patid;
  if a and b and issuedate < index_date and issuedate >= intnx('day', index_date, -365) then prior_sglt2=1;
  else prior_sglt2=0;
run;

data work.dpp4_prior;
  merge work.sglt2_prior (in=a) dpp4_history (in=b);
  by patid;
  if a and b and issuedate < index_date and issuedate >= intnx('day', index_date, -365) then prior_dpp4=1;
  else prior_dpp4=0;
run;

data work.tzd_prior;
  merge work.dpp4_prior (in=a) tzd_history (in=b);
  by patid;
  if a and b and issuedate < index_date and issuedate >= intnx('day', index_date, -365) then prior_tzd=1;
  else prior_tzd=0;
run;

data work.exclusion_final;
  set work.tzd_prior;
  exclusion_flag = 0;
  if prior_sglt2=1 or prior_dpp4=1 or prior_tzd=1 then exclusion_flag=1;
run;

data work.index_after_washout;
  set work.exclusion_final;
  if exclusion_flag=0;
run;

/************************************************************************************
STEP 6: PRIOR CV EVENTS (MI, STROKE)
************************************************************************************/

proc sort data=subset_diag.diagnosis_mipartofma_subset; by patid; run;
proc sort data=subset_diag.diagnosis_strokepart_subset; by patid; run;

data work.cv_events;
  merge work.index_after_washout (in=a)
        subset_diag.diagnosis_mipartofma_subset (in=mi)
        subset_diag.diagnosis_strokepart_subset (in=stroke);
  by patid;
run;

data work.final_cleaned;
  set work.cv_events;
  if mi=1 and diagnosis_date <= index_date then delete;
  if stroke=1 and diagnosis_date <= index_date then delete;
run;

/************************************************************************************
STEP 7: DEFINE ENTRY, EXIT & EXPORT
************************************************************************************/

data work.final_dataset;
  set work.final_cleaned;
  entry = index_date;
  exit_final = exit; 
  followup_time = exit_final - entry;
run;

proc export data=work.final_dataset
  outfile="F:\Projects\Student\Gabriela Ochoa Gracia\final_analysis.csv"
  dbms=csv replace;
run;
/*********************************************************************************************
STEP 10: MERGE COVARIATES BEFORE EXPORT
*********************************************************************************************/

libname subset_diag "F:\\Projects\\Student\\Gabriela Ochoa Gracia\\Subsets_Diagnosis";
libname subset_prod "F:\\Projects\\Student\\Gabriela Ochoa Gracia\\Subset_Product";

/*** Sort files for merging ***/

proc sort data=work.final_cleaned; by patid; run;
proc sort data=subset_diag.frailty_subset; by patid; run;
proc sort data=subset_diag.obesity_subset; by patid; run;
proc sort data=subset_diag.ckd_subset; by patid; run;
proc sort data=subset_diag.cancer_subset; by patid; run;
proc sort data=subset_diag.copd_subset; by patid; run;
proc sort data=subset_prod.statin_subset; by patid; run;
proc sort data=subset_prod.insulin_subset; by patid; run;
proc sort data=subset_prod.antihypertensives_subset; by patid; run;

/*** Merge all covariates to final cohort ***/

data work.final_with_covariates;
  merge work.final_cleaned (in=a)
        subset_diag.frailty_subset (in=b)
        subset_diag.obesity_subset (in=c)
        subset_diag.ckd_subset (in=d)
        subset_diag.cancer_subset (in=e)
        subset_diag.copd_subset (in=f)
        subset_prod.statin_subset (in=g)
        subset_prod.insulin_subset (in=h)
        subset_prod.antihypertensives_subset (in=i);
  by patid;

  /* Create binary flags for covariates */
  frailty_flag = (b);
  obesity_flag = (c);
  ckd_flag = (d);
  cancer_flag = (e);
  copd_flag = (f);
  statin_flag = (g);
  insulin_flag = (h);
  antihypertensive_flag = (i);
run;

/*** Export final dataset ready for R ***/

proc export data=work.final_with_covariates
  outfile="F:\\Projects\\Student\\Gabriela Ochoa Gracia\\final_analysis_with_covariates.csv"
  dbms=csv replace;
run;
/*| Step        | What we coded                   | What happened                                                             |
| ----------- | ------------------------------- | ------------------------------------------------------------------------- |
| **Step 1**  | Build valid entry/exit          | Create entry/exit windows like your peer Vasiliki                         |
| **Step 2**  | Apply T2DM + age eligibility    | Merge diagnosis\_diabetestype2\_subset                                    |
| **Step 3**  | Apply strict CV risk definition | Merge all CV risk factors (ihd, stroke, pad, dyslipidemia, etc.)          |
| **Step 4**  | Assign initial exposures        | Merge first use of SGLT2i and DPP4i                                       |
| **Step 5**  | Apply washout exclusions        | Exclude prior use of SGLT2i, DPP4i, pioglitazone, rosiglitazone           |
| **Step 6**  | Exclude prior CV events         | Merge MI, stroke diagnoses and exclude those with prior event             |
| **Step 7**  | Define follow-up windows        | Assign entry (index\_date), exit (exit\_final), follow-up time            |
| **Step 8**  | (Was not originally separate)   | In fact: this is where you'd normally handle *outcome ascertainment*      |
| **Step 9**  | (Was not originally separate)   | Here you'd normally handle death outcomes (if needed)                     |
| **Step 10** | Merge covariates                | Add all your comorbidity covariates (frailty, obesity, ckd, cancer, etc.) |
*/

